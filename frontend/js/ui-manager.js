import { MOOD_DISPLAY_NAMES } from './constants.js';

export class UIManager {
    constructor() {
        this.moodButtons = document.querySelectorAll('.mood-btn');
        this.createVideoBtn = document.getElementById('create-video-btn');
        this.placeholderText = document.querySelector('.placeholder-text');
        this.videoPreview = document.getElementById('video-preview');
        this.previewContainer = document.querySelector('.preview-container');
        
        this.selectedMood = null;
        this.hasUserSelectedMood = false; // –§–ª–∞–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        
        this.initUI();
    }

    initUI() {
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –≤–∏–¥–µ–æ
        this.showPlaceholder(true);
        this.showCreateButton(false);
        this.showVideoPreview(false);
        
        console.log("‚úÖ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder");
    }

    showPlaceholder(show = true) {
        console.log(`showPlaceholder called with: ${show}`);
        
        if (show) {
            this.placeholderText.style.display = 'block';
            requestAnimationFrame(() => {
                this.placeholderText.style.opacity = '1';
            });
            console.log("‚úÖ Placeholder –ø–æ–∫–∞–∑–∞–Ω");
        } else {
            this.placeholderText.style.opacity = '0';
            setTimeout(() => {
                this.placeholderText.style.display = 'none';
                console.log("‚úÖ Placeholder —Å–∫—Ä—ã—Ç");
            }, 300);
        }
    }

    showCreateButton(show = true) {
        console.log(`showCreateButton called with: ${show}`);
        
        if (show) {
            this.createVideoBtn.disabled = false;
            this.createVideoBtn.style.transition = 'transform 0.5s ease, opacity 0.5s ease';
            this.createVideoBtn.style.opacity = '1';
            this.createVideoBtn.style.transform = 'translate(-50%, -50%) scale(1)';
            console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞");
        } else {
            this.createVideoBtn.style.opacity = '0';
            this.createVideoBtn.style.transform = 'translate(-50%, -50%) scale(0)';
            console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä—ã—Ç–∞");
        }
    }

    setCreateButtonState(creating = false) {
        if (creating) {
            this.createVideoBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
            this.createVideoBtn.disabled = true;
        } else {
            this.createVideoBtn.textContent = '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ';
            this.createVideoBtn.disabled = false;
        }
    }

    selectMood(mood) {
        console.log(`selectMood called with: ${mood}`);
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        this.moodButtons.forEach(btn => btn.classList.remove('selected'));
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        const selectedButton = Array.from(this.moodButtons).find(
            btn => btn.dataset.mood === mood
        );
        if (selectedButton) {
            selectedButton.classList.add('selected');
        }
        
        this.selectedMood = mood;
        this.hasUserSelectedMood = true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        
        // –ü–†–ò –í–´–ë–û–†–ï –ù–ê–°–¢–†–û–ï–ù–ò–Ø: —Å–∫—Ä—ã–≤–∞–µ–º placeholder, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.showPlaceholder(false);
        this.showCreateButton(true);
        
        console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: ${mood}, placeholder —Å–∫—Ä—ã—Ç, –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞`);
    }

    getSelectedMood() {
        return this.selectedMood;
    }

    getMoodDisplayName(mood) {
        return MOOD_DISPLAY_NAMES[mood] || mood;
    }

    showVideoPreview(show = true) {
        console.log(`showVideoPreview called with: ${show}`);
        
        if (show) {
            this.videoPreview.style.display = 'block';
            this.videoPreview.style.opacity = '0';
            this.videoPreview.style.zIndex = '2';
            
            requestAnimationFrame(() => {
                this.videoPreview.style.opacity = '1';
            });
            console.log("‚úÖ –í–∏–¥–µ–æ –ø–æ–∫–∞–∑–∞–Ω–æ");
        } else {
            this.videoPreview.style.opacity = '0';
            setTimeout(() => {
                this.videoPreview.style.display = 'none';
                this.videoPreview.style.zIndex = '';
                console.log("‚úÖ –í–∏–¥–µ–æ —Å–∫—Ä—ã—Ç–æ");
            }, 300);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ"
    showVideoCreated() {
        console.log("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ'");
        this.showPlaceholder(false);
        this.showCreateButton(false);
        this.showVideoPreview(true);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ (–∫–æ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ)
    resetToSelection() {
        console.log("üîÑ –°–±—Ä–æ—Å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞");
        this.showVideoPreview(false);
        
        // –ï–°–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
        if (this.hasUserSelectedMood) {
            this.showPlaceholder(false);
            this.showCreateButton(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
            this.showPlaceholder(true);
            this.showCreateButton(false);
        }
        
        this.selectedMood = null;
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        this.moodButtons.forEach(btn => btn.classList.remove('selected'));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ)
    fullReset() {
        console.log("üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å UI");
        this.hasUserSelectedMood = false;
        this.selectedMood = null;
        this.moodButtons.forEach(btn => btn.classList.remove('selected'));
        this.initUI();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    getMoodButtons() {
        return this.moodButtons;
    }
}